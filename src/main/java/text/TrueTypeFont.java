package text;

import java.awt.*;
import java.awt.image.*;
import java.io.*;
import java.nio.*;
import java.util.HashMap;
import java.util.Map;

import static org.lwjgl.opengl.GL11.*;

public class TrueTypeFont {
    private String path;
    private Font font;
    private ByteBuffer imageData;
    private BufferedImage imageBuffer;
    private Graphics2D imageGraphics;
    private int image = 0;

    private static final Map<Integer, String> CHARS = new HashMap<Integer, String>() {{
        put(1, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        put(2, "abcdefghijklmnopqrstuvwxyz");
        put(3, "0123456789");
        put(4, "ÄÖÜäöüß");   // Yep - I am from Germany ^^
        put(5, "$+-*/=%\"'#@&_(),.;:?!\\|<>[]§`^~");
    }};

    public TrueTypeFont(String path) throws Exception {
        this.path = path;

        try {
            font = Font.createFont(java.awt.Font.TRUETYPE_FONT, new File(path)).deriveFont(32f);

            generateTexture();

        } catch (FontFormatException ex) {
            throw new Exception("Font is not a TTF!");
        } catch (IOException ex) {
            throw new Exception(ex);
        }
    }

    //Draws the bitmap generated by the class
    public void drawBitmap(float x, float y) {
        glBindTexture(GL_TEXTURE_2D, image);
        glBegin(GL_QUADS);

        glTexCoord2f(0, 0);
        glVertex3f(x, y, 0);

        glTexCoord2f(1, 0);
        glVertex3f(x + 512, y, 0);

        glTexCoord2f(1, 1);
        glVertex3f(x + 512, y + 512, 0);

        glTexCoord2f(0, 1);
        glVertex3f(x, y + 512, 0);

        glEnd();
    }

    public void drawText(String text, float x, float y) {
        glBindTexture(GL_TEXTURE_2D, image);
        glBegin(GL_QUADS);
        for (char c : text.toCharArray()) {
            for (int index : CHARS.keySet()) {
                float p = (float) CHARS.get(index).indexOf(c);
                if (p >= 0) {
                    float recY = 1f / 512f * 32f;
                    float recX = 1f / 512f * 16f;
                    float xStart = recX * p;
                    float yStart = recY * (index - 1);

                    glTexCoord2f(xStart, yStart);
                    glVertex3f(x, y, 0);

                    glTexCoord2f(xStart + recX, yStart);
                    glVertex3f(x + 16, y, 0);

                    glTexCoord2f(xStart + recX, yStart + recY);
                    glVertex3f(x + 16, y + 32, 0);

                    glTexCoord2f(xStart, yStart + recY);
                    glVertex3f(x, y + 32, 0);

                    break;
                }
            }
            x += 16;
        }

        glEnd();
    }

    private void generateTexture() {

//Configure
        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
        Graphics2D graphics = gc.createCompatibleImage(1, 1, Transparency.TRANSLUCENT).createGraphics();
        graphics.setFont(font);

        //Create the image buffer
        FontMetrics fontMetrics = graphics.getFontMetrics();
        BufferedImage imageBuffer = graphics.getDeviceConfiguration().createCompatibleImage(512, 512, Transparency.TRANSLUCENT);

//Draw the characters on our image
        imageGraphics = (Graphics2D) imageBuffer.getGraphics();
        imageGraphics.setFont(font);
        imageGraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        imageGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        // draw every CHAR by line...
        imageGraphics.setColor(Color.WHITE);
        CHARS.keySet().stream().forEach(i -> {
            imageGraphics.drawString(CHARS.get(i), 0, fontMetrics.getMaxAscent() * i);
        });

        //Generate texture data
        int[] pixels = new int[imageBuffer.getWidth() * imageBuffer.getHeight()];
        imageBuffer.getRGB(0, 0, imageBuffer.getWidth(), imageBuffer.getHeight(), pixels, 0, imageBuffer.getWidth());
        imageData = ByteBuffer.allocateDirect((imageBuffer.getWidth() * imageBuffer.getHeight() * 4));

        for (int y = 0; y < imageBuffer.getHeight(); y++) {
            for (int x = 0; x < imageBuffer.getWidth(); x++) {
                int pixel = pixels[y * imageBuffer.getWidth() + x];
                imageData.put((byte) ((pixel >> 16) & 0xFF));     // Red component
                imageData.put((byte) ((pixel >> 8) & 0xFF));      // Green component
                imageData.put((byte) (pixel & 0xFF));               // Blue component
                imageData.put((byte) ((pixel >> 24) & 0xFF));    // Alpha component. Only for RGBA
            }
        }

        imageData.flip();

        //Generate texture
        image = glGenTextures();

        glEnable(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D, image);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 512, 512, 0, GL_RGBA, GL_UNSIGNED_BYTE, imageData);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    }
}
