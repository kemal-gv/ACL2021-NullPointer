@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "windows.Window"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1068799382 { 
   	label=models
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Labyrinthe1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Labyrinthe</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   animationChest: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boundingBoxes: AABB[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   chests: ArrayList&lt;Chest&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   height: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   listMonstres: List&lt;Monstre&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scale: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tiles: Tile[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tilesByte: byte[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   width: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   window: Window [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   world: Matrix4f [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ajoutMonstre(m: Monstre)</TD></TR>
<TR><TD ALIGN="LEFT" >+ correctCamera(camera: Camera, win: Window)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getChest(x: int, y: int): Chest</TD></TR>
<TR><TD ALIGN="LEFT" >+ getElementPlateau(x: int, y: int): Tile</TD></TR>
<TR><TD ALIGN="LEFT" >+ openChest(posx: int, posy: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ openDoor(posx: int, posy: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(tileRenderer: TileRenderer, shader: Shader, cam: Camera)</TD></TR>
<TR><TD ALIGN="LEFT" >- takeLoot(posx: int, posy: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ verifChest()</TD></TR>
<TR><TD ALIGN="LEFT" >- verifCollisionMonstre(x: int, y: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ verifierCollision(x: int, y: int): AABB</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1183866391 { 
   	label=inputs
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Input1183866391[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Input</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   keys: boolean[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   validKeyList: List&lt;Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   validKeys: int[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   window: long [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isKeyDown(key: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isKeyPressed(key: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isKeyReleased(key: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isMouseButtonDown(button: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1349493379 { 
   	label=windows
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Window1349493379[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Window</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fullscreen: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   height: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   input: Input [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   width: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createWindow(title: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shouldClose(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ swapBuffers()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Labyrinthe1068799382 -> Window1349493379[label="window
[0..1]"];
Window1349493379 -> Input1183866391[label="input
[0..1]"];
    
}
@enduml