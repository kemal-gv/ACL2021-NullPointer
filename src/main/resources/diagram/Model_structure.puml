@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "models.Model"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1068799382 { 
   	label=models
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   GameOver1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameOver</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   continuer: Boolean [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   model: Model [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   texture: Texture [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   tr: Transform [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ render(shader: Shader, cam: Camera)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(win: Window)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

HealthBar1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)HealthBar</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   model_green: Model [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   model_red: Model [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   texture_green: Texture [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   texture_red: Texture [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tr: Transform [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   vie_total: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ render(shader: Shader)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(vie: float)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Joueur1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Joueur</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   attaque: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boundingBox: AABB [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   model: Model [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   posX: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   posY: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   texture: Animation [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tr: Transform [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   vie: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deplacement(delta: float, win: Window, camera: Camera, world: Labyrinthe)</TD></TR>
<TR><TD ALIGN="LEFT" >- openDoor()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(shader: Shader, camera: Camera)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Labyrinthe1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Labyrinthe</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   animationChest: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boundingBoxes: AABB[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   chests: ArrayList&lt;Chest&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   height: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   listMonstres: List&lt;Monstre&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scale: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tiles: Tile[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tilesByte: byte[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   width: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   window: Window [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   world: Matrix4f [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ajoutMonstre(m: Monstre)</TD></TR>
<TR><TD ALIGN="LEFT" >+ correctCamera(camera: Camera, win: Window)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getChest(x: int, y: int): Chest</TD></TR>
<TR><TD ALIGN="LEFT" >+ getElementPlateau(x: int, y: int): Tile</TD></TR>
<TR><TD ALIGN="LEFT" >+ openChest(posx: int, posy: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ openDoor(posx: int, posy: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(tileRenderer: TileRenderer, shader: Shader, cam: Camera)</TD></TR>
<TR><TD ALIGN="LEFT" >- takeLoot(posx: int, posy: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ verifChest()</TD></TR>
<TR><TD ALIGN="LEFT" >- verifCollisionMonstre(x: int, y: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ verifierCollision(x: int, y: int): AABB</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Model1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Model</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   drawCount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   indiceID: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   textureID: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   verticeID: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- createBuffer(data: float[]): FloatBuffer</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Monstre1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Monstre</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   attaque: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boundingBox: AABB [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   model: Model [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   posX: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   posY: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   texture: Animation [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tr: Transform [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   vie: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deplacementAleatoire(delta: float, win: Window, camera: Camera, world: Labyrinthe)</TD></TR>
<TR><TD ALIGN="LEFT" >+ reduireVie(vie: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(shader: Shader, camera: Camera)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_110363525 { 
   	label=tiles
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   TileRenderer110363525[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TileRenderer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   gestionnaireTile: GestionnaireTile [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   model: Model [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tileTexture: HashMap&lt;String, Texture&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ renderTile(id: int, x: int, y: int, sh: Shader, world: Matrix4f, cam: Camera)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
GameOver1068799382 -> Model1068799382[label="model
[0..1]"];
HealthBar1068799382 -> Model1068799382[label="model_green
[0..1]"];
HealthBar1068799382 -> Model1068799382[label="model_red
[0..1]"];
Joueur1068799382 -> Model1068799382[label="model
[0..1]"];
Labyrinthe1068799382 -> Monstre1068799382[label="listMonstres
[0..*]"];
Monstre1068799382 -> Model1068799382[label="model
[0..1]"];
TileRenderer110363525 -> Model1068799382[label="model
[0..1]"];
    
}
@enduml